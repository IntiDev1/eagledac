// frontendEagledac/src/components/DeployConsole.tsx

import { useEffect, useRef, useState } from "react";
import "../styles/deploy.scss";

import { useAccount, useWalletClient } from "wagmi";
import { abi } from "../contracts/GeneratedDAC-abi";
import bytecode from "../contracts/GeneratedDAC-bytecode";
import WalletConnector from "./WalletConnector";

function DeployConsole() {
  const [logs, setLogs] = useState<string[]>([]);
  const [txHash, setTxHash] = useState<string | null>(null);
  const [deploying, setDeploying] = useState(false);
  const [dacCount, setDacCount] = useState<number>(0);
  const consoleRef = useRef<HTMLDivElement>(null);

  const { data: walletClient } = useWalletClient();
  const { address } = useAccount();

  //  helper para traer contador desde backend (GET /api/dac-counter)
  const fetchCount = async () => {
    try {
      const res = await fetch("http://localhost:3001/api/dac-counter");
      const data = await res.json();
      setDacCount(Number(data?.count || 0));
    } catch (error) {
      console.error("❌ Error fetching DAC count:", error);
    }
  };

  const handleDeploy = async () => {
    if (!walletClient || !address) {
      setLogs((prev) => [...prev, "❌ Wallet not connected"]);
      return;
    }

    try {
      setDeploying(true);
      setLogs(["🛠 Starting deployment..."]);

      console.log("Wallet Client:", walletClient); //Prueva walletClient

      //  Deploy via viem/wagmi
      const hash = await walletClient.deployContract({
        abi,
        bytecode,
        args: ["This DAC was generated by EagleDAC 🦅"],
        account: address,
      });

      setLogs((prev) => [...prev, `📡 Tx Hash: ${hash}`]);
      setTxHash(hash);

      //  incrementa contador (POST /api/dac-counter/increment)
      fetch("http://localhost:3001/api/dac-counter/increment", {
        method: "POST",
      }).catch((e) => console.warn("counter increment failed", e));

      // refresca número
      await fetchCount();
    } catch (err: unknown) {
      const msg = err instanceof Error ? err.message : JSON.stringify(err);
      console.error("Deploy error:", err); // nuevo log
      setLogs((prev) => [...prev, `❌ Error: ${msg}`]);
    }

    /*} catch (err: unknown) {
      const msg = err instanceof Error ? err.message : String(err);
      setLogs((prev) => [...prev, `❌ Error: ${msg}`]);
    } finally {
      setDeploying(false);
    }*/
  };

  // carga contador al entrar
  useEffect(() => {
    fetchCount();
  }, []);

  // autoscroll del “terminal”
  useEffect(() => {
    const el = consoleRef.current;
    if (el) el.scrollTop = el.scrollHeight;
  }, [logs]);

  return (
    <div className="deploy-console">
      <h2> Deploy Smart Contract</h2>
      <WalletConnector />

      <p className="counter-display">
        Total DACs deployed: <strong>{dacCount}</strong>
      </p>

      <button onClick={handleDeploy} disabled={deploying}>
        {deploying ? (
          <>
            <span className="spinner" /> Deploying...
          </>
        ) : (
          " Deploy DAC"
        )}
      </button>

      <div className="console-output" ref={consoleRef}>
        {logs.map((line, idx) => (
          <pre
            key={idx}
            className={
              line.includes("✅")
                ? "log-success"
                : line.includes("❌")
                ? "log-error"
                : ""
            }
          >
            {line}
          </pre>
        ))}
      </div>

      {txHash && (
        <div className="deploy-success">
          <p> Deployed to:</p>
          <a
            href={`https://andromeda-explorer.metis.io/tx/${txHash}`}
            target="_blank"
            rel="noopener noreferrer"
          >
            {txHash}
          </a>
        </div>
      )}
    </div>
  );
}

export default DeployConsole;
